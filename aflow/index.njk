<!DOCTYPE html>
<html lang="en">
	<head>
		{% include 'head.njk' %}
		<link rel="stylesheet" type="text/css" href="/aflow/style.css">
		<script src="/lib/lodash.js" ></script>
		<script src="/lib/jquery-3.3.1.min.js"></script>
		<script src="/lib/stringify.js"></script>
		<script src="/lib/misbehave.js"></script>
	</head>
	<body class="w-100 sans-serif">
		{% include 'header.njk' %}

		<main>

			{% set id = 'demo1' %}
			{% include './demo1.njk' %}
			<div class="cl"></div>

		<p style="max-width: none;" class="mh0 ph4-ns ph3 f4-ns f5 flex items-center">12ss/2020&nbsp;&nbsp;<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
		<h1 class="near-black ph4-ns ph3 fw5 f1-ns f1-m f2">Aflow: designing a dataflow programming language</h1>
		<div class="ph4-ns ph3 f4-ns content lh-copy">

{% markdown %}

### Motivation

Many programmers want to design a programming language at some point. This is one of such attempts. Is my first try, and it might be uninformed and naive, but have to start somewhere :)

### Inspiration

My main inspiration comes from systems like [Observable](observablehq.com) and [Nodes](http://nodes.io), that demonstrate interesting programming paradigms, while not designing a language from scratch, and rather building on top of Javascript.

So it's possible to relatively easily explore and prototype different interesting programming paradigms, using web browser as universally available platform.

I was mainly inspired by visual dataflow environments like [Pure Data](https://puredata.info/), [NoFlo](https://noflojs.org/), and [Nodes](http://nodes.io). But the thing that I don't like much about those, is using graphical elements to design programs. It works well in some cases, but I still like text editing more.

I wanted to explore an alternative, text based interface for dataflow programs. Such languages exist, for example:

- [NoFlo FBP DSL](https://bergie.iki.fi/blog/9915130395/)
- [Nextflow](https://www.nextflow.io/index.html)

I wanted to make something similar, but interactive (more like [Observable](observablehq.com)), and with more lightweight and minimal syntax.

### Language design

The main requirement for the design is simple and minimal syntax. Another requirement is easy JS interop, so that for any features that are not supported by the language, it's possible to just use inline JS code, or call JS functions.

Syntax is simple, and has only a few building blocks:

- top-level expressions, that are are a list of statements separated with an arrow (→). Literal, or output of a function is assigned to a variable that follows after an arrow. Statements are execute sequentially.
- a statement can be:
    - repeat(10), or repeat(10hz) — triggers execution of the expression number of times or periodically.
    - literals, numbers and strings are supported
    - builtin function for simple utilities a limited set fo now: log, push, filter, clone
    - a function call, can call functions defined with fn keyword, or JS functions
    - a variable, local, local variables are just alphanumeric identifiers, global are wrapped with brackets
    - inline JS code, this extends the language to using arbitrary JS code
- function definitions that start with "fn" keyword and function name, and are followed by a list of statements (separated with an arrow →).
- JS functions definitions. can be placed inline, with similar to JS syntax.

### Simple example, "hello world"

It's easier to show the language based on examples. Examples are interactive, can use "step" and "run" buttons to run the code, top text area is for editing the code, and bottom one is for syntax highlighting, visualizing which current statement and setting breakpoints. A breakpoint can be set with a click on a statement.

A following example, shows usage of literals, variables and log function. Here, a literal is assigned to a variable, and then log function is used for output.

{% endmarkdown %}

{% set id = 'demo2' %}
{% include './demo_inline.njk' %}

{% markdown %}

### Another simple example

Next example shows assigning a number to a variable, repeating expressions some number of times, and periodically.

{% endmarkdown %}

{% set id = 'demo3' %}
{% include './demo_inline.njk' %}

{% markdown %}

### Mult-agent simulation (flocking) example

For even more complex example, I selected multi-agent flocking simulation. Explanations of the "boids" flocking algorithm can be found on pages by [Craig Reynolds](http://www.red3d.com/cwr/boids/) and [Conrad Parker](http://www.kfish.org/boids/). It is often used as a demo for interactive graphical applications and agent-based frameworks, for example:

- hash.ai (Javascript) [https://hash.ai/@stephen_x/boids-2d](https://hash.ai/@stephen_x/boids-2d)
- Agents.js (Julia) [https://juliadynamics.github.io/Agents.jl/stable/examples/flock/](https://juliadynamics.github.io/Agents.jl/stable/examples/flock/)
- Mesa (Python) [https://github.com/projectmesa/mesa/tree/master/examples/boid_flockers](https://github.com/projectmesa/mesa/tree/master/examples/boid_flockers)
- JavaScript demo: [https://github.com/beneater/boids](https://github.com/beneater/boids)

Compared to other implementations, code is *aflow* seems to be more compact (~50 LOC vs >100 LOC). Another feature is that the main "gist" of the algorithm is outlined within first few dozen lines, and the rest of the code is within a set of utility functions.

I think that this style promotes describing structure of the algorithm in short concise way. Also, it encourages using short functional bits of code. But for now it's just a hypothesis, and to confirm it have to write more code based on the finished language implementation.

{% endmarkdown %}

{% set id = 'demo4' %}
{% include './demo_w_canvas.njk' %}

{% markdown %}

Some more demos:

{% endmarkdown %}

{% set id = 'demo5' %}
{% include './demo_w_canvas.njk' %}

{% set id = 'demo6' %}
{% include './demo_w_canvas.njk' %}

{% markdown %}

## Refenences & links

### FBP

[Domain-specific language for Flow-Based Programming](https://bergie.iki.fi/blog/noflo-two-years/)

[NoFlo: two years of flow-based programming](https://bergie.iki.fi/blog/noflo-two-years/)

[https://jpaulm.github.io/fbp/index.html](https://jpaulm.github.io/fbp/index.html)

[https://noflojs.org/](https://noflojs.org/)

[https://cables.gl/](https://cables.gl/)

[https://nodes.io/](https://nodes.io/story/)

### Flocking

[http://www.kfish.org/boids/pseudocode.html](http://www.kfish.org/boids/pseudocode.html)

[https://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/modeling-natural-systems/boids.html](https://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/modeling-natural-systems/boids.html)

{% endmarkdown %}


{% markdown %}




{% endmarkdown %}


		</main>

		<script type="module" src="/aflow/runtime.js"></script>
		<script type="module" src="/aflow/ui.js"></script>

		{% include 'footer.njk' %}
	</body>
</html>
